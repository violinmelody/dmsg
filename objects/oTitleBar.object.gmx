<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDiscooooord</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
   Copyright 2019 Violin Melody

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

//Window dragging &amp; shaking:
dragX = 0;                                          //where you dragged it? (X)
dragY = 0;                                          //where you dragged it? (Y)
wPosX = 0;                                          //position of dragged window (X)
wPosY = 0;                                          //position of dragged window (Y)
wSetX = window_get_x();                             //window final position (X) (game tries to set it!)
wSetY = window_get_y();                             //window final position (Y) (game tries to set it!)
dragged = 0;                                        //is window dragged?
windowImpact = 1;                                   //window shake impact (when shooting &amp; explosions etc.)
windowImpactEnabled = 1;                            //enable it or disable

//effects:
effectShake = 0;                                                //shake effect:
shakeSpeed = 0.2;                                               //  - shake speed
shakeSwitch = 0;                                                //  - shake direction
shakeAngle = 1;                                                 //  - angle amount
effectTiltY = 0;                                                //tilt (Y) effect:
tiltYSpeed = 0.8;                                               //  - tilt speed
tiltYSwitch = 0;                                                //  - tilt direction
tiltYAmount = 2;                                                //  - tilt length
effectTiltX = 0;                                                //tilt (X) effect:
tiltXSpeed = 0.8;                                               //  - tilt speed
tiltXSwitch = 0;                                                //  - tilt direction
tiltXAmount = 2;                                                //  - tilt length

//Bars settings:
titleBarHeight = 45;

//Create titlebar buttons:
for (i=0; i&lt;3; i++){
    button = instance_create(room_width-(sprite_get_width(sBClose)*(i+1)),0,oTitleBarButton);
    button.bType = i+1;  //close, full, minimise
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//window dragging:
if !(window_get_fullscreen()){          //drag only when not full screen
    wPosX = window_get_x() + window_mouse_get_x();
    wPosY = window_get_y() + window_mouse_get_y();
    
    if mouse_check_button_pressed(mb_left){
        dragged = 1;
        dragX = window_get_x() - wPosX;
        dragY = window_get_y() - wPosY;
        //window_set_cursor(cr_size_all);
    }
    
    if (dragged &amp;&amp; mouse_check_button(mb_left)){
        windowImpact = 0;                           //disable window shake impact...
        wSetX = dragX + wPosX;                      //calculate final windows X
        wSetY = dragY + wPosY;                      //calculate final windows Y
        window_set_position(wSetX,wSetY);           //set final window position
    } else{
        //window_set_cursor(cr_default);
        dragged = 0;
        windowImpact = 1;                           //enable window shake impact...
    }
    
    //window shaking:
    if (windowImpact &amp;&amp; windowImpactEnabled) {      //only when triggered AND enabled
        window_set_position(wSetX+view_xview[0],wSetY+view_yview[0]);
    }
} else {            //it's in full screen, so don't bother dragging
    dragged = 0;
}

/*      ADDITIONAL EFFECTS:     */
//shake effect:
if (effectShake) {
    if !(shakeSwitch) {     //shake it!
        if (view_angle[0] &lt; shakeAngle) {view_angle[0] += shakeSpeed;} else {shakeSwitch = 1;}
    } else {
        if (view_angle[0] &gt; -shakeAngle) {view_angle[0] -= shakeSpeed;} else {shakeSwitch = 0; effectShake = 0;}
    }
} else {                    //make it great again!
    if (view_angle[0] &lt; 0) {view_angle[0] += shakeSpeed;}
    else if (view_angle[0] &gt; 0) {view_angle[0] -= shakeSpeed;}
    else {view_angle[0] = 0;}
}

//tiltY effect:
if (effectTiltY) {
    if !(tiltYSwitch) {      //tilt like in good'ol'days!
        if (view_yview[0] &lt; tiltYAmount) {view_yview[0] += tiltYSpeed;} else {tiltYSwitch = 1;}
    } else {
        if (view_yview[0] &gt; -tiltYAmount) {view_yview[0] -= tiltYSpeed;} else {tiltYSwitch = 0; effectTiltY = 0;}
    }
} else {                    //make it great again!
    if (view_yview[0] &lt; 0) {view_yview[0] += tiltYSpeed;}
    else if (view_yview[0] &gt; 0) {view_yview[0] -= tiltYSpeed;}
    else {view_yview[0] = 0;}
}

//tiltX effect:
if (effectTiltX) {
    if !(tiltXSwitch) {      //tilt like in good'ol'days!
        if (view_xview[0] &lt; tiltXAmount) {view_xview[0] += tiltXSpeed;} else {tiltXSwitch = 1;}
    } else {
        if (view_xview[0] &gt; -tiltXAmount) {view_xview[0] -= tiltYSpeed;} else {tiltXSwitch = 0; effectTiltX = 0;}
    }
} else {                    //make it great again!
    if (view_xview[0] &lt; 0) {view_xview[0] += tiltXSpeed;}
    else if (view_xview[0] &gt; 0) {view_xview[0] -= tiltXSpeed;}
    else {view_xview[0] = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make titlebar:
draw_sprite_stretched(sTitleBar,0,0,0,room_width,titleBarHeight);

//Draw Title:
draw_sprite(sDiscooooord,0,0,4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
