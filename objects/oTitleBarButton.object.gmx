<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBClose</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
   Copyright 2019 Violin Melody

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

//Define button:
bType = 0;              //0 - none; 1 - close; 2 - full screen; 3 - minimise;
status = 0;             //0 - not hovered; 1 - hovered;


alarm[0] = 1;           //just to make sure to do it after object was created (useful for creating it from different object code)


depth = -1000;          //draw aboce titlebar


//Button actions (from dll):
//global.log = ds_list_create();

if (os_type == os_windows) {
    window_command_hook(window_command_minimize);
    window_command_hook(window_command_maximize);
    window_command_hook(window_command_restore);
    window_command_hook(window_command_close);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set proper button type:
switch (bType) {
    case 1:
        btn = sBClose;
        break;
        
    case 2:
        btn = sBFull;
        break;
        
    case 3:
        btn = sBMinimise;
        break;
        
    case 4:
        btn = sBEmpty;
        break;
        
    case 5:
        btn = sBInfo;
        break;
        
    default:
        btn = 0;
        instance_destroy();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Button actions:
if (status = 1) &amp;&amp; (mouse_check_button_released(mb_left)){
    switch(bType){
        case 1:
            game_end();
            break;
            
        case 2:
            if (window_get_fullscreen()){
                window_set_fullscreen(0);
            } else {
                window_set_fullscreen(1);
            }
            break;
            
        case 3:
            if (os_type == os_windows) {
                window_command_run(window_command_minimize);
            }
            break;
            
        default:
            break;
    }
}




//Button actions (from dll):
/*if (window_command_check(window_command_minimize)) trace("Minimize clicked.");
if (window_command_check(window_command_maximize)) trace("Maximize clicked.");
*/
if (os_type = os_windows) {
    if (window_command_check(window_command_restore)) {
        //trace("Restore clicked.");
        if (window_get_height() == 0) {
            // Restoring from minimized state
            window_command_run(window_command_restore);
        }
    }
}
/*if (window_command_check(window_command_close)) trace("Close clicked.");

if (keyboard_check_pressed(ord("1"))) window_command_run(window_command_minimize);
if (keyboard_check_pressed(ord("2"))) window_command_run(window_command_maximize);
if (keyboard_check_pressed(ord("3"))) window_command_run(window_command_restore);
if (keyboard_check_pressed(ord("4"))) window_command_run(window_command_close);

if (keyboard_check_pressed(ord("Q"))) window_command_toggle("Maximize", window_command_minimize);
if (keyboard_check_pressed(ord("W"))) window_command_toggle("Minimize", window_command_maximize);
if (keyboard_check_pressed(ord("E"))) window_command_toggle("Move", window_command_move);
if (keyboard_check_pressed(ord("R"))) window_command_toggle("Close", window_command_close);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw that damn button:
draw_sprite(btn,status,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
