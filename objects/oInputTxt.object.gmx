<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
   Copyright 2019 Violin Melody

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

inputID = 0;    //define it in creation code of object placed in the room
                //as we need to get values from many objects like this one, so we
                //use array :3
inputType = 1;  //0 - numbers; 1 - text;
maxVal = 1;     //max value (for numbers only)
iLength = 20;   //max input length

aRealValue[inputID] = 0;     //used for async dialog
aStringValue[inputID] = "";  //same

draw_set_font(font0);
global.value[inputID] = "";
writing = 0;
c = make_colour_rgb(185,187,186);
a = make_colour_rgb(255,255,255);
txtCursor = "|";
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txtCursor = "|";
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txtCursor = "";
alarm[1] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type == os_windows) {
    if writing {
    
        if (inputType) {
            global.value[inputID] = keyboard_string;                            //text input
        }
        else {
            if (real(keyboard_string) &lt;= maxVal) &amp;&amp; (real(keyboard_string) &gt; 0) {
                global.value[inputID] = real(keyboard_string);                  //number input
            //} else {
            //    global.value[inputID] = maxVal;
            }
        }
        if string_length(global.value[inputID]) &gt; iLength {  //limit text length and shake when too many letters
            global.value[inputID] = string_copy(global.value[inputID], 1, iLength);
            keyboard_string = global.value[inputID];
            oTitleBar.effectTiltX = 1;
            oTitleBar.effectTiltY = 1;
        }
        if (keyboard_check_pressed(vk_enter)) {writing = 0; keyboard_string = 0;}
    } else {
            //¯\_(ツ)_/¯
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_type == os_android) {
    if (inputType) {
        aStringValue = get_string_async("Text:",global.value[inputID]);
        global.value[inputID] = aStringValue;
    } else {
        aRealValue = get_integer_async("Number:",global.value[inputID]);
        global.value[inputID] = aRealValue;
    }
} else {
    writing = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _id = ds_map_find_value(async_load, "id");

if (inputType) {
    if _id == aStringValue {
        if ds_map_find_value(async_load, "status") {
            if (ds_map_find_value(async_load, "result") != "") {
                global.value[inputID] = string(ds_map_find_value(async_load, "result"));
                show_message(global.value[inputID]);
            } else {
                global.value[inputID] = "";
            }
        }
    }
} else {
    if _id == aRealValue {
        if ds_map_find_value(async_load, "status") {
            if (real(ds_map_find_value(async_load, "result")) &gt; 0) &amp;&amp; (real(ds_map_find_value(async_load, "result")) &lt;= maxVal) {
                global.value[inputID] = real(ds_map_find_value(async_load, "result"));
                show_message(string(global.value[inputID]));
            } else {
                global.value[inputID] = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite3,0,x,y);

//Display text in nice way:
if (writing) {
    if (string_length(string(global.value[inputID])) &gt; 10) {    //we need to display it in nice way, and the field is pretty small so we'll cut some of the string and add "..."
        draw_text_colour(x+2,y,"..." + string_copy(string(global.value[inputID]), 10, iLength) + string(txtCursor),a,a,a,a,1);
    } else {
        draw_text_colour(x+2,y,string(global.value[inputID]) + string(txtCursor),a,a,a,a,1);
    }
} else {

    if (string_length(string(global.value[inputID])) &gt; 10) {    //we need to display it in nice way, and the field is pretty small so we'll cut some of the string and add "..."
        draw_text_colour(x+2,y,"..." + string_copy(string(global.value[inputID]), 10, iLength),c,c,c,c,1);
    } else {
        draw_text_colour(x+2,y,string(global.value[inputID]),c,c,c,c,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
